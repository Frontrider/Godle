import org.junit.jupiter.api.io.TempDir
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.ArgumentsSource
import java.io.File


class TestRunner {

    @ParameterizedTest
    @ArgumentsSource(ScriptTypeArgumentProvider::class)
    fun `execute with no configuration`(postfix: String, @TempDir tempDir: File) {

        "noconfig".createBuildFile(postfix, tempDir)
        //run the tasks we want
        val result =doRun(tempDir, listOf("tasks", "buildEnvironment"), "--stacktrace")
        val output = result.output
        output.assertContains("Godot information:","Header not printed")
        output.assertContains("Current version: 3.5","Godot version not printed")
    }

    @ParameterizedTest
    @ArgumentsSource(ScriptTypeArgumentProvider::class)
    fun `can disable shell script generation`(postfix: String, @TempDir tempDir: File) {
        "respectShellScriptGeneration".createBuildFile(postfix, tempDir)
        //run the tasks we want
        doRun(tempDir, listOf("tasks", "buildEnvironment"), "--stacktrace")

        // The build file specifies NOT to generate the shell scripts.
        // Check if the setting was respected and the files haven't been generated.
        val allFiles = tempDir.listFiles() ?: emptyArray()
        allFiles.assertFileNotPresent("editor.sh")
        allFiles.assertFileNotPresent("editor.bat")
        allFiles.assertFileNotPresent("game.sh")
        allFiles.assertFileNotPresent("game.bat")
    }

    @ParameterizedTest
    @ArgumentsSource(ScriptTypeArgumentProvider::class)
    fun `shell scripts are generated by default`(postfix: String, @TempDir tempDir: File) {

        "noconfig".createBuildFile(postfix, tempDir)
        //run the tasks we want
        doRun(tempDir, listOf("tasks", "buildEnvironment"), "--stacktrace")
        // The build file specifies NOT to generate the shell scripts.
        // Check if the setting was respected and the files haven't been generated.
        val allFiles = tempDir.listFiles() ?: emptyArray()
        allFiles.assertFileIsPresent("editor.sh")
        allFiles.assertFileIsPresent("editor.bat")
        allFiles.assertFileIsPresent("game.sh")
        allFiles.assertFileIsPresent("game.bat")
    }

    private fun Array<out File>.assertFileIsPresent(fileName: String) {
        assert(any { it.name == fileName }) {
            "The file '${fileName}' does not exist even though it should exist."
        }
    }

    private fun Array<out File>.assertFileNotPresent(fileName: String) {
        assert(none { it.name == fileName }) {
            "The file '${fileName}' exists even though it shouldn't exist."
        }
    }

}